services:
  # Serviço do Banco de Dados PostgreSQL
  db:
    image: postgres:13-alpine
    container_name: gt-vision-db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    # As variáveis são lidas do arquivo .env na raiz do projeto
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - gtv_network
    restart: unless-stopped

  # Serviço do Message Broker RabbitMQ
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: gt-vision-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    networks:
      - gtv_network
    restart: unless-stopped

  # Serviço do Backend (API)
  backend:
    build: ./backend
    container_name: gt-vision-backend
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - rabbitmq
    networks:
      - gtv_network
    restart: unless-stopped
    healthcheck:
      # CORREÇÃO: Aponta para o endpoint de saúde correto /api/health
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Serviço do Processador de IA
  ai-processor:
    build: ./ai-processor
    container_name: gt-vision-ai-processor
    volumes:
      - ./ai-processor:/app
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_started
      backend:
        # Espera o backend estar saudável (passar no healthcheck) antes de iniciar
        condition: service_healthy
    networks:
      - gtv_network
    restart: unless-stopped

# Volumes nomeados para persistência de dados
volumes:
  postgres_data:

# Rede customizada para a comunicação entre os contêineres
networks:
  gtv_network:
    driver: bridge
